//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Resources/InteractionSystem/InputActionAssets/PCGamepad/PCGamepad.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActionAssetCode
{
    public partial class @PCGamepad : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PCGamepad()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PCGamepad"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""1bc23ae5-4cb3-4f01-a9ca-57a7fcf47e2e"",
            ""actions"": [
                {
                    ""name"": ""EscapeMenu"",
                    ""type"": ""Button"",
                    ""id"": ""7d8a4318-17ff-4e24-9e27-ee4e484ec785"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d45d06da-f62b-480a-8b01-0f36bdc8365a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9717decd-79b5-4452-8c10-d9a15dc5dffd"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Generic"",
            ""id"": ""de064526-684a-4880-b001-51ee94a59685"",
            ""actions"": [
                {
                    ""name"": ""PlayerMenu"",
                    ""type"": ""Button"",
                    ""id"": ""77624631-0606-4739-aa0f-2cd8600c8013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot1"",
                    ""type"": ""Button"",
                    ""id"": ""2eb86f1a-c663-4aa3-b944-b375e52833e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot2"",
                    ""type"": ""Button"",
                    ""id"": ""a7bd890a-d496-41dd-8e5c-121122bc7861"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot3"",
                    ""type"": ""Button"",
                    ""id"": ""540ecebd-5ae0-4e7c-95da-114820f95301"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot4"",
                    ""type"": ""Button"",
                    ""id"": ""55eaf1c1-5b4a-46cd-aa13-35f8f83b8d46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickInventory"",
                    ""type"": ""Button"",
                    ""id"": ""b9bc5744-6d9c-411b-abda-07adedea14c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PerformEmote"",
                    ""type"": ""Button"",
                    ""id"": ""ab63e1db-a28d-459a-a9c0-55683345c18d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickMap"",
                    ""type"": ""Button"",
                    ""id"": ""65819f29-7e58-488d-9a02-e77b1478b30e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fe6bca3-379b-4c94-8aaa-75a1aebcb010"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""PlayerMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94105e11-9e51-420e-9c0d-07d86ed1a2f5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PlayerMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7710efdf-87f6-4db7-845e-6eb4f8b7b0cd"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""PlayerMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ccfd71d-1e1f-4f6d-b66e-564296593fb5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickSlot1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""813bee27-2a61-4fe0-8c7b-aa6b4cd6cd7a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickSlot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""596e40c6-bb93-4f40-a404-6f0a5e717ee3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickSlot3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c5f2ad6-7ba5-4e7e-9a31-f00d955fa4cc"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickSlot4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4592d87e-b35d-40d0-a1b2-88e30a377e2d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8e9201f-bf46-4302-8f9b-30e341192de4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PerformEmote"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dfa292a-3f67-45eb-a151-153128a458ce"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""QuickMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement Level 1"",
            ""id"": ""dc42c12a-d1bf-4419-a504-0ba451159758"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""0f1068ce-783c-4385-8b74-c1e844d50e3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""d3eb3862-d326-4f13-bf60-efae7d9d9f2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""172ceb74-0a9c-44b2-9f07-e0e40a3c33fd"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""80dd713e-2b0a-4c9a-93ea-69c5ed5dd32e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3071fff1-19ad-4335-a2d2-2a84e6f8bea7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1504a83b-40af-4819-8c44-66701fd5d27c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""395cc45a-1363-424f-a07e-da626324bfb1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b0207524-c2a7-410b-bc45-96684b59fcc3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a5c8fcb-f767-4187-9351-1c8f4e57a801"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d338ba8c-93c2-480c-806b-9b8828b51992"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28434aa8-2cf7-41b5-9f37-edf7c0f68290"",
                    ""path"": ""<XRController>{LeftHand}/joystickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed518f5c-76fe-4996-af63-924a52221323"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement Level 2"",
            ""id"": ""4c373e0b-f372-414e-8beb-79574ca5ab35"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f51b1ca3-1971-4641-a1be-e7f5ce798f1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""9f866e5d-5890-459f-94cd-e01b71503541"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f45e03c0-44cf-4397-a039-203218f0512e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60d66312-b273-468c-9cda-3eb697a5c984"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63c34015-4219-4cce-8eb6-5e409097a294"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08074ba-35a9-488e-84ee-e2e2e9c6a2dc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""9fa7a9cc-be93-45f5-9760-eeb64017fcf4"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""dcde8b13-3695-47d1-8b43-63b4f0357e17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalScroll"",
                    ""type"": ""Value"",
                    ""id"": ""3dae60f9-ad9f-40c7-b8a2-e5f843c8be84"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControllerCursor"",
                    ""type"": ""Value"",
                    ""id"": ""e3a5ebb2-1ccc-4599-ad99-ae4262f4c685"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PageLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a6e2e97d-0dad-4fcd-a19e-784a007226c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PageRight"",
                    ""type"": ""Button"",
                    ""id"": ""c3e758f4-2ac6-4d1b-b482-9ccacfcc3d05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6740a1c3-4966-4084-b583-933f78d1b276"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df5dbc77-551f-494b-8a5b-f703cd254753"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dec2de51-e767-4832-a562-ad2b9ee46b64"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36664361-1744-44b8-b668-0ebc6c4c0f60"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0)"",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""VerticalScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28927bc6-6901-4f75-bddb-ba16d42d02fd"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0)"",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""VerticalScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79c159d1-3f95-4a40-a9c8-0fd36c240f21"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0)"",
                    ""groups"": ""Controller"",
                    ""action"": ""VerticalScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ccb9e7e-3c5c-487d-b6fd-fcf788ed407d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e00fa4e6-5904-49e3-ae83-703126444dbc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PageLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81b58201-7bf5-4f90-a076-b94ef74b6fcd"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""PageLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57eecd62-ae6c-4ed6-abd0-5da4e3e19883"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PageRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d95245d-ee5d-458a-bba2-fa408889c534"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""PageRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Held Item"",
            ""id"": ""59d08e30-fd39-44ca-aca0-f6a25cc3515b"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""685dbbd8-fea1-416e-b8c8-04aec583ec87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""cb28980e-58a7-4ece-8a5a-318a9fa71e7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""b63b8b85-cde8-442f-9c66-3c6659764fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d991a5ba-2363-4099-8d99-24664dba25e7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActionPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""563570f4-23a0-4902-82a8-7f125309ec19"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ActionPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ba7259f-9b2b-4ca4-99ec-cf47e4ff1570"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e27582f0-85a9-4914-8a1c-3cd702485ea6"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee5ffafc-2bac-4773-a7d8-65500419163e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActionSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed97a88-a9eb-41da-bec9-8910f779f4bd"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ActionSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Item Pickup"",
            ""id"": ""8e4da5eb-9f47-4595-957a-c5823eede22b"",
            ""actions"": [
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""18cd14db-73fb-4202-b2e5-83dfd323a125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c5593a1-98c3-49e7-bc38-dd2a7302cc39"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86722bee-ed32-4994-a278-3e89a598010c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Interaction"",
            ""id"": ""e6807aed-2ccf-4b30-a741-8483ec316f32"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f70d3945-d795-4689-929f-91c855aab918"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1790b1f-13b2-465a-b536-92e2d191e1a5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a4694a-0615-47fd-81f2-ce1bdfd85708"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e418f16-faee-47dd-be09-7ea369ee0886"",
                    ""path"": ""<XRController>/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Communication"",
            ""id"": ""61eeead0-d5c9-4355-aa27-e7b8c552e1cd"",
            ""actions"": [
                {
                    ""name"": ""PushToTalk"",
                    ""type"": ""Button"",
                    ""id"": ""4685ce97-5c5f-47a2-8da5-3ce417815d8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""616cca0d-bed4-4e95-8f36-c306d349d098"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PushToTalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Virtual Reality"",
            ""bindingGroup"": ""Virtual Reality"",
            ""devices"": [
                {
                    ""devicePath"": ""<OpenXRHmd>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_EscapeMenu = m_Main.FindAction("EscapeMenu", throwIfNotFound: true);
            // Generic
            m_Generic = asset.FindActionMap("Generic", throwIfNotFound: true);
            m_Generic_PlayerMenu = m_Generic.FindAction("PlayerMenu", throwIfNotFound: true);
            m_Generic_QuickSlot1 = m_Generic.FindAction("QuickSlot1", throwIfNotFound: true);
            m_Generic_QuickSlot2 = m_Generic.FindAction("QuickSlot2", throwIfNotFound: true);
            m_Generic_QuickSlot3 = m_Generic.FindAction("QuickSlot3", throwIfNotFound: true);
            m_Generic_QuickSlot4 = m_Generic.FindAction("QuickSlot4", throwIfNotFound: true);
            m_Generic_QuickInventory = m_Generic.FindAction("QuickInventory", throwIfNotFound: true);
            m_Generic_PerformEmote = m_Generic.FindAction("PerformEmote", throwIfNotFound: true);
            m_Generic_QuickMap = m_Generic.FindAction("QuickMap", throwIfNotFound: true);
            // Movement Level 1
            m_MovementLevel1 = asset.FindActionMap("Movement Level 1", throwIfNotFound: true);
            m_MovementLevel1_Walk = m_MovementLevel1.FindAction("Walk", throwIfNotFound: true);
            m_MovementLevel1_Sprint = m_MovementLevel1.FindAction("Sprint", throwIfNotFound: true);
            // Movement Level 2
            m_MovementLevel2 = asset.FindActionMap("Movement Level 2", throwIfNotFound: true);
            m_MovementLevel2_Jump = m_MovementLevel2.FindAction("Jump", throwIfNotFound: true);
            m_MovementLevel2_Crouch = m_MovementLevel2.FindAction("Crouch", throwIfNotFound: true);
            // Menus
            m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
            m_Menus_Select = m_Menus.FindAction("Select", throwIfNotFound: true);
            m_Menus_VerticalScroll = m_Menus.FindAction("VerticalScroll", throwIfNotFound: true);
            m_Menus_ControllerCursor = m_Menus.FindAction("ControllerCursor", throwIfNotFound: true);
            m_Menus_PageLeft = m_Menus.FindAction("PageLeft", throwIfNotFound: true);
            m_Menus_PageRight = m_Menus.FindAction("PageRight", throwIfNotFound: true);
            // Held Item
            m_HeldItem = asset.FindActionMap("Held Item", throwIfNotFound: true);
            m_HeldItem_Drop = m_HeldItem.FindAction("Drop", throwIfNotFound: true);
            m_HeldItem_ActionPrimary = m_HeldItem.FindAction("ActionPrimary", throwIfNotFound: true);
            m_HeldItem_ActionSecondary = m_HeldItem.FindAction("ActionSecondary", throwIfNotFound: true);
            // World Item Pickup
            m_WorldItemPickup = asset.FindActionMap("World Item Pickup", throwIfNotFound: true);
            m_WorldItemPickup_PickUp = m_WorldItemPickup.FindAction("PickUp", throwIfNotFound: true);
            // World Interaction
            m_WorldInteraction = asset.FindActionMap("World Interaction", throwIfNotFound: true);
            m_WorldInteraction_Interact = m_WorldInteraction.FindAction("Interact", throwIfNotFound: true);
            // Communication
            m_Communication = asset.FindActionMap("Communication", throwIfNotFound: true);
            m_Communication_PushToTalk = m_Communication.FindAction("PushToTalk", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private IMainActions m_MainActionsCallbackInterface;
        private readonly InputAction m_Main_EscapeMenu;
        public struct MainActions
        {
            private @PCGamepad m_Wrapper;
            public MainActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @EscapeMenu => m_Wrapper.m_Main_EscapeMenu;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void SetCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterface != null)
                {
                    @EscapeMenu.started -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                    @EscapeMenu.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                    @EscapeMenu.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                }
                m_Wrapper.m_MainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @EscapeMenu.started += instance.OnEscapeMenu;
                    @EscapeMenu.performed += instance.OnEscapeMenu;
                    @EscapeMenu.canceled += instance.OnEscapeMenu;
                }
            }
        }
        public MainActions @Main => new MainActions(this);

        // Generic
        private readonly InputActionMap m_Generic;
        private IGenericActions m_GenericActionsCallbackInterface;
        private readonly InputAction m_Generic_PlayerMenu;
        private readonly InputAction m_Generic_QuickSlot1;
        private readonly InputAction m_Generic_QuickSlot2;
        private readonly InputAction m_Generic_QuickSlot3;
        private readonly InputAction m_Generic_QuickSlot4;
        private readonly InputAction m_Generic_QuickInventory;
        private readonly InputAction m_Generic_PerformEmote;
        private readonly InputAction m_Generic_QuickMap;
        public struct GenericActions
        {
            private @PCGamepad m_Wrapper;
            public GenericActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @PlayerMenu => m_Wrapper.m_Generic_PlayerMenu;
            public InputAction @QuickSlot1 => m_Wrapper.m_Generic_QuickSlot1;
            public InputAction @QuickSlot2 => m_Wrapper.m_Generic_QuickSlot2;
            public InputAction @QuickSlot3 => m_Wrapper.m_Generic_QuickSlot3;
            public InputAction @QuickSlot4 => m_Wrapper.m_Generic_QuickSlot4;
            public InputAction @QuickInventory => m_Wrapper.m_Generic_QuickInventory;
            public InputAction @PerformEmote => m_Wrapper.m_Generic_PerformEmote;
            public InputAction @QuickMap => m_Wrapper.m_Generic_QuickMap;
            public InputActionMap Get() { return m_Wrapper.m_Generic; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GenericActions set) { return set.Get(); }
            public void SetCallbacks(IGenericActions instance)
            {
                if (m_Wrapper.m_GenericActionsCallbackInterface != null)
                {
                    @PlayerMenu.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnPlayerMenu;
                    @PlayerMenu.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnPlayerMenu;
                    @PlayerMenu.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnPlayerMenu;
                    @QuickSlot1.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot1;
                    @QuickSlot1.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot1;
                    @QuickSlot1.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot1;
                    @QuickSlot2.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot2;
                    @QuickSlot2.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot2;
                    @QuickSlot2.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot2;
                    @QuickSlot3.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot3;
                    @QuickSlot3.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot3;
                    @QuickSlot3.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot3;
                    @QuickSlot4.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot4;
                    @QuickSlot4.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot4;
                    @QuickSlot4.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickSlot4;
                    @QuickInventory.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickInventory;
                    @QuickInventory.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickInventory;
                    @QuickInventory.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickInventory;
                    @PerformEmote.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnPerformEmote;
                    @PerformEmote.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnPerformEmote;
                    @PerformEmote.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnPerformEmote;
                    @QuickMap.started -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickMap;
                    @QuickMap.performed -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickMap;
                    @QuickMap.canceled -= m_Wrapper.m_GenericActionsCallbackInterface.OnQuickMap;
                }
                m_Wrapper.m_GenericActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PlayerMenu.started += instance.OnPlayerMenu;
                    @PlayerMenu.performed += instance.OnPlayerMenu;
                    @PlayerMenu.canceled += instance.OnPlayerMenu;
                    @QuickSlot1.started += instance.OnQuickSlot1;
                    @QuickSlot1.performed += instance.OnQuickSlot1;
                    @QuickSlot1.canceled += instance.OnQuickSlot1;
                    @QuickSlot2.started += instance.OnQuickSlot2;
                    @QuickSlot2.performed += instance.OnQuickSlot2;
                    @QuickSlot2.canceled += instance.OnQuickSlot2;
                    @QuickSlot3.started += instance.OnQuickSlot3;
                    @QuickSlot3.performed += instance.OnQuickSlot3;
                    @QuickSlot3.canceled += instance.OnQuickSlot3;
                    @QuickSlot4.started += instance.OnQuickSlot4;
                    @QuickSlot4.performed += instance.OnQuickSlot4;
                    @QuickSlot4.canceled += instance.OnQuickSlot4;
                    @QuickInventory.started += instance.OnQuickInventory;
                    @QuickInventory.performed += instance.OnQuickInventory;
                    @QuickInventory.canceled += instance.OnQuickInventory;
                    @PerformEmote.started += instance.OnPerformEmote;
                    @PerformEmote.performed += instance.OnPerformEmote;
                    @PerformEmote.canceled += instance.OnPerformEmote;
                    @QuickMap.started += instance.OnQuickMap;
                    @QuickMap.performed += instance.OnQuickMap;
                    @QuickMap.canceled += instance.OnQuickMap;
                }
            }
        }
        public GenericActions @Generic => new GenericActions(this);

        // Movement Level 1
        private readonly InputActionMap m_MovementLevel1;
        private IMovementLevel1Actions m_MovementLevel1ActionsCallbackInterface;
        private readonly InputAction m_MovementLevel1_Walk;
        private readonly InputAction m_MovementLevel1_Sprint;
        public struct MovementLevel1Actions
        {
            private @PCGamepad m_Wrapper;
            public MovementLevel1Actions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @Walk => m_Wrapper.m_MovementLevel1_Walk;
            public InputAction @Sprint => m_Wrapper.m_MovementLevel1_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_MovementLevel1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementLevel1Actions set) { return set.Get(); }
            public void SetCallbacks(IMovementLevel1Actions instance)
            {
                if (m_Wrapper.m_MovementLevel1ActionsCallbackInterface != null)
                {
                    @Walk.started -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @Walk.performed -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @Walk.canceled -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @Sprint.started -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                }
                m_Wrapper.m_MovementLevel1ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Walk.started += instance.OnWalk;
                    @Walk.performed += instance.OnWalk;
                    @Walk.canceled += instance.OnWalk;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                }
            }
        }
        public MovementLevel1Actions @MovementLevel1 => new MovementLevel1Actions(this);

        // Movement Level 2
        private readonly InputActionMap m_MovementLevel2;
        private IMovementLevel2Actions m_MovementLevel2ActionsCallbackInterface;
        private readonly InputAction m_MovementLevel2_Jump;
        private readonly InputAction m_MovementLevel2_Crouch;
        public struct MovementLevel2Actions
        {
            private @PCGamepad m_Wrapper;
            public MovementLevel2Actions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_MovementLevel2_Jump;
            public InputAction @Crouch => m_Wrapper.m_MovementLevel2_Crouch;
            public InputActionMap Get() { return m_Wrapper.m_MovementLevel2; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementLevel2Actions set) { return set.Get(); }
            public void SetCallbacks(IMovementLevel2Actions instance)
            {
                if (m_Wrapper.m_MovementLevel2ActionsCallbackInterface != null)
                {
                    @Jump.started -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Crouch.started -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                }
                m_Wrapper.m_MovementLevel2ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                }
            }
        }
        public MovementLevel2Actions @MovementLevel2 => new MovementLevel2Actions(this);

        // Menus
        private readonly InputActionMap m_Menus;
        private IMenusActions m_MenusActionsCallbackInterface;
        private readonly InputAction m_Menus_Select;
        private readonly InputAction m_Menus_VerticalScroll;
        private readonly InputAction m_Menus_ControllerCursor;
        private readonly InputAction m_Menus_PageLeft;
        private readonly InputAction m_Menus_PageRight;
        public struct MenusActions
        {
            private @PCGamepad m_Wrapper;
            public MenusActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_Menus_Select;
            public InputAction @VerticalScroll => m_Wrapper.m_Menus_VerticalScroll;
            public InputAction @ControllerCursor => m_Wrapper.m_Menus_ControllerCursor;
            public InputAction @PageLeft => m_Wrapper.m_Menus_PageLeft;
            public InputAction @PageRight => m_Wrapper.m_Menus_PageRight;
            public InputActionMap Get() { return m_Wrapper.m_Menus; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
            public void SetCallbacks(IMenusActions instance)
            {
                if (m_Wrapper.m_MenusActionsCallbackInterface != null)
                {
                    @Select.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnSelect;
                    @VerticalScroll.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnVerticalScroll;
                    @VerticalScroll.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnVerticalScroll;
                    @VerticalScroll.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnVerticalScroll;
                    @ControllerCursor.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnControllerCursor;
                    @ControllerCursor.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnControllerCursor;
                    @ControllerCursor.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnControllerCursor;
                    @PageLeft.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageLeft;
                    @PageLeft.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageLeft;
                    @PageLeft.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageLeft;
                    @PageRight.started -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageRight;
                    @PageRight.performed -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageRight;
                    @PageRight.canceled -= m_Wrapper.m_MenusActionsCallbackInterface.OnPageRight;
                }
                m_Wrapper.m_MenusActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @VerticalScroll.started += instance.OnVerticalScroll;
                    @VerticalScroll.performed += instance.OnVerticalScroll;
                    @VerticalScroll.canceled += instance.OnVerticalScroll;
                    @ControllerCursor.started += instance.OnControllerCursor;
                    @ControllerCursor.performed += instance.OnControllerCursor;
                    @ControllerCursor.canceled += instance.OnControllerCursor;
                    @PageLeft.started += instance.OnPageLeft;
                    @PageLeft.performed += instance.OnPageLeft;
                    @PageLeft.canceled += instance.OnPageLeft;
                    @PageRight.started += instance.OnPageRight;
                    @PageRight.performed += instance.OnPageRight;
                    @PageRight.canceled += instance.OnPageRight;
                }
            }
        }
        public MenusActions @Menus => new MenusActions(this);

        // Held Item
        private readonly InputActionMap m_HeldItem;
        private IHeldItemActions m_HeldItemActionsCallbackInterface;
        private readonly InputAction m_HeldItem_Drop;
        private readonly InputAction m_HeldItem_ActionPrimary;
        private readonly InputAction m_HeldItem_ActionSecondary;
        public struct HeldItemActions
        {
            private @PCGamepad m_Wrapper;
            public HeldItemActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drop => m_Wrapper.m_HeldItem_Drop;
            public InputAction @ActionPrimary => m_Wrapper.m_HeldItem_ActionPrimary;
            public InputAction @ActionSecondary => m_Wrapper.m_HeldItem_ActionSecondary;
            public InputActionMap Get() { return m_Wrapper.m_HeldItem; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HeldItemActions set) { return set.Get(); }
            public void SetCallbacks(IHeldItemActions instance)
            {
                if (m_Wrapper.m_HeldItemActionsCallbackInterface != null)
                {
                    @Drop.started -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnDrop;
                    @ActionPrimary.started -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.performed -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.canceled -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionPrimary;
                    @ActionSecondary.started -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.performed -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.canceled -= m_Wrapper.m_HeldItemActionsCallbackInterface.OnActionSecondary;
                }
                m_Wrapper.m_HeldItemActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                    @ActionPrimary.started += instance.OnActionPrimary;
                    @ActionPrimary.performed += instance.OnActionPrimary;
                    @ActionPrimary.canceled += instance.OnActionPrimary;
                    @ActionSecondary.started += instance.OnActionSecondary;
                    @ActionSecondary.performed += instance.OnActionSecondary;
                    @ActionSecondary.canceled += instance.OnActionSecondary;
                }
            }
        }
        public HeldItemActions @HeldItem => new HeldItemActions(this);

        // World Item Pickup
        private readonly InputActionMap m_WorldItemPickup;
        private IWorldItemPickupActions m_WorldItemPickupActionsCallbackInterface;
        private readonly InputAction m_WorldItemPickup_PickUp;
        public struct WorldItemPickupActions
        {
            private @PCGamepad m_Wrapper;
            public WorldItemPickupActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @PickUp => m_Wrapper.m_WorldItemPickup_PickUp;
            public InputActionMap Get() { return m_Wrapper.m_WorldItemPickup; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldItemPickupActions set) { return set.Get(); }
            public void SetCallbacks(IWorldItemPickupActions instance)
            {
                if (m_Wrapper.m_WorldItemPickupActionsCallbackInterface != null)
                {
                    @PickUp.started -= m_Wrapper.m_WorldItemPickupActionsCallbackInterface.OnPickUp;
                    @PickUp.performed -= m_Wrapper.m_WorldItemPickupActionsCallbackInterface.OnPickUp;
                    @PickUp.canceled -= m_Wrapper.m_WorldItemPickupActionsCallbackInterface.OnPickUp;
                }
                m_Wrapper.m_WorldItemPickupActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PickUp.started += instance.OnPickUp;
                    @PickUp.performed += instance.OnPickUp;
                    @PickUp.canceled += instance.OnPickUp;
                }
            }
        }
        public WorldItemPickupActions @WorldItemPickup => new WorldItemPickupActions(this);

        // World Interaction
        private readonly InputActionMap m_WorldInteraction;
        private IWorldInteractionActions m_WorldInteractionActionsCallbackInterface;
        private readonly InputAction m_WorldInteraction_Interact;
        public struct WorldInteractionActions
        {
            private @PCGamepad m_Wrapper;
            public WorldInteractionActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_WorldInteraction_Interact;
            public InputActionMap Get() { return m_Wrapper.m_WorldInteraction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldInteractionActions set) { return set.Get(); }
            public void SetCallbacks(IWorldInteractionActions instance)
            {
                if (m_Wrapper.m_WorldInteractionActionsCallbackInterface != null)
                {
                    @Interact.started -= m_Wrapper.m_WorldInteractionActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_WorldInteractionActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_WorldInteractionActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_WorldInteractionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public WorldInteractionActions @WorldInteraction => new WorldInteractionActions(this);

        // Communication
        private readonly InputActionMap m_Communication;
        private ICommunicationActions m_CommunicationActionsCallbackInterface;
        private readonly InputAction m_Communication_PushToTalk;
        public struct CommunicationActions
        {
            private @PCGamepad m_Wrapper;
            public CommunicationActions(@PCGamepad wrapper) { m_Wrapper = wrapper; }
            public InputAction @PushToTalk => m_Wrapper.m_Communication_PushToTalk;
            public InputActionMap Get() { return m_Wrapper.m_Communication; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CommunicationActions set) { return set.Get(); }
            public void SetCallbacks(ICommunicationActions instance)
            {
                if (m_Wrapper.m_CommunicationActionsCallbackInterface != null)
                {
                    @PushToTalk.started -= m_Wrapper.m_CommunicationActionsCallbackInterface.OnPushToTalk;
                    @PushToTalk.performed -= m_Wrapper.m_CommunicationActionsCallbackInterface.OnPushToTalk;
                    @PushToTalk.canceled -= m_Wrapper.m_CommunicationActionsCallbackInterface.OnPushToTalk;
                }
                m_Wrapper.m_CommunicationActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PushToTalk.started += instance.OnPushToTalk;
                    @PushToTalk.performed += instance.OnPushToTalk;
                    @PushToTalk.canceled += instance.OnPushToTalk;
                }
            }
        }
        public CommunicationActions @Communication => new CommunicationActions(this);
        private int m_VirtualRealitySchemeIndex = -1;
        public InputControlScheme VirtualRealityScheme
        {
            get
            {
                if (m_VirtualRealitySchemeIndex == -1) m_VirtualRealitySchemeIndex = asset.FindControlSchemeIndex("Virtual Reality");
                return asset.controlSchemes[m_VirtualRealitySchemeIndex];
            }
        }
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_ControllerSchemeIndex = -1;
        public InputControlScheme ControllerScheme
        {
            get
            {
                if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
                return asset.controlSchemes[m_ControllerSchemeIndex];
            }
        }
        public interface IMainActions
        {
            void OnEscapeMenu(InputAction.CallbackContext context);
        }
        public interface IGenericActions
        {
            void OnPlayerMenu(InputAction.CallbackContext context);
            void OnQuickSlot1(InputAction.CallbackContext context);
            void OnQuickSlot2(InputAction.CallbackContext context);
            void OnQuickSlot3(InputAction.CallbackContext context);
            void OnQuickSlot4(InputAction.CallbackContext context);
            void OnQuickInventory(InputAction.CallbackContext context);
            void OnPerformEmote(InputAction.CallbackContext context);
            void OnQuickMap(InputAction.CallbackContext context);
        }
        public interface IMovementLevel1Actions
        {
            void OnWalk(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
        public interface IMovementLevel2Actions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
        }
        public interface IMenusActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnVerticalScroll(InputAction.CallbackContext context);
            void OnControllerCursor(InputAction.CallbackContext context);
            void OnPageLeft(InputAction.CallbackContext context);
            void OnPageRight(InputAction.CallbackContext context);
        }
        public interface IHeldItemActions
        {
            void OnDrop(InputAction.CallbackContext context);
            void OnActionPrimary(InputAction.CallbackContext context);
            void OnActionSecondary(InputAction.CallbackContext context);
        }
        public interface IWorldItemPickupActions
        {
            void OnPickUp(InputAction.CallbackContext context);
        }
        public interface IWorldInteractionActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
        public interface ICommunicationActions
        {
            void OnPushToTalk(InputAction.CallbackContext context);
        }
    }
}
