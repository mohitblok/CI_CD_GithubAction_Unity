//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Resources/InteractionSystem/InputActionAssets/VirtualReality/VirtualReality.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActionAssetCode
{
    public partial class @VirtualReality : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @VirtualReality()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""VirtualReality"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""1bc23ae5-4cb3-4f01-a9ca-57a7fcf47e2e"",
            ""actions"": [
                {
                    ""name"": ""EscapeMenu"",
                    ""type"": ""Button"",
                    ""id"": ""7d8a4318-17ff-4e24-9e27-ee4e484ec785"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d45d06da-f62b-480a-8b01-0f36bdc8365a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9717decd-79b5-4452-8c10-d9a15dc5dffd"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tracking"",
            ""id"": ""f008e176-34a3-4d4b-8a10-5334a206ea18"",
            ""actions"": [
                {
                    ""name"": ""HeadPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a169c5c8-a90f-4ace-90cb-a0f5d74b3f68"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""Value"",
                    ""id"": ""febf0b49-b790-4286-91ef-cb9253b03331"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b1f0ebe1-9c6a-48fd-865c-70b46e005027"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""44a6e45d-18b8-48a8-9939-da15291a8016"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1fd0e0f2-557b-4ae3-a1d9-62b90a5eeb58"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""660af109-82f9-4371-a133-a931bf9a2d7c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c255ab85-4c34-4b7c-9653-47a6eca3c15b"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""HeadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d29f2ce-1291-48fe-a3a4-7db06f04a74a"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61055c8b-fae3-4316-ac27-d2cd2c9e8b62"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""LeftHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6670c8c8-b7ee-41b4-8bd6-971c17e7f35c"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""LeftHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4871c4c8-a74a-4168-9e19-4182d4a070ea"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""RightHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34dddf67-bf62-4eac-b4ee-1674ffbfaf57"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""RightHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Teleportation"",
            ""id"": ""4782a891-4f8e-4a54-9e48-d0d6cdc7e841"",
            ""actions"": [
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Button"",
                    ""id"": ""f330d251-7b71-4485-94c0-92fe98b30783"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""14cecf15-fcb0-40cb-9080-ddcc954bfdd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a133aab-da3f-4a66-bbe5-b8513104ee5b"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b469e7ab-febc-414b-bab3-18f564a3035b"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement Level 1"",
            ""id"": ""dc42c12a-d1bf-4419-a504-0ba451159758"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""0f1068ce-783c-4385-8b74-c1e844d50e3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnVR"",
                    ""type"": ""Value"",
                    ""id"": ""2692c6f5-00a0-4a67-b563-3a98d4a31bdf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""d3eb3862-d326-4f13-bf60-efae7d9d9f2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""172ceb74-0a9c-44b2-9f07-e0e40a3c33fd"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""80dd713e-2b0a-4c9a-93ea-69c5ed5dd32e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3071fff1-19ad-4335-a2d2-2a84e6f8bea7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1504a83b-40af-4819-8c44-66701fd5d27c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""395cc45a-1363-424f-a07e-da626324bfb1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b0207524-c2a7-410b-bc45-96684b59fcc3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a5c8fcb-f767-4187-9351-1c8f4e57a801"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a643eff-bad6-4a95-8c17-cb26dac52a42"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0)"",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""TurnVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d338ba8c-93c2-480c-806b-9b8828b51992"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28434aa8-2cf7-41b5-9f37-edf7c0f68290"",
                    ""path"": ""<XRController>{LeftHand}/joystickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed518f5c-76fe-4996-af63-924a52221323"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement Level 2"",
            ""id"": ""4c373e0b-f372-414e-8beb-79574ca5ab35"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f51b1ca3-1971-4641-a1be-e7f5ce798f1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""9f866e5d-5890-459f-94cd-e01b71503541"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpCrouchVR"",
                    ""type"": ""Value"",
                    ""id"": ""983c2836-22cc-418b-978a-46adc6b51426"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f45e03c0-44cf-4397-a039-203218f0512e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60d66312-b273-468c-9cda-3eb697a5c984"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63c34015-4219-4cce-8eb6-5e409097a294"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08074ba-35a9-488e-84ee-e2e2e9c6a2dc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a84e608-afab-4923-8042-f616451a3060"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""JumpCrouchVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus Left Hand"",
            ""id"": ""14fc4f84-b6c4-46e3-ac40-8f1425d3a4c9"",
            ""actions"": [
                {
                    ""name"": ""GrabLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""34d64bc9-95a8-4c45-95ef-790dacf23079"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0fd68b6-bacc-4e90-b70d-c33d2016c3c6"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""GrabLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus Right Hand"",
            ""id"": ""08290d03-65ab-4ea6-9264-d5243b035620"",
            ""actions"": [
                {
                    ""name"": ""GrabRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""a8788362-767a-42bc-bb3b-5433ff85c580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5c747a9-4c01-4e13-80f6-e48f37a116b8"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""GrabRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Held Item Left Hand"",
            ""id"": ""36c7057a-fba5-42c1-a778-1530b1658e2a"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""1c8463a7-e41f-45cf-92a5-fb7fa0478cbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""2f65c9f9-9675-4734-9add-69cbff9985a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""c1c9f8b3-15c8-42fd-9101-af98c2e3ba26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6a2a592-d08a-4d67-b2fd-536ef111b8a5"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c071bbf6-e142-44ca-84a7-031199b0adc3"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""ActionPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""136518ad-e12b-4aeb-9dc9-0703c578e47d"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""ActionSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Held Item Right Hand"",
            ""id"": ""6732dd03-baf4-4041-99d4-ed52140a3add"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""fa797e0e-883b-4dee-9cc2-77fecabb57d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""1ddb9d5a-3055-4098-8432-5af81144d212"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""c3c3e646-d022-4843-ac3d-e6785c9c8a95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de75c203-7410-486e-9ddd-e2f9cc531eab"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fab3fc1-f0cb-47c3-8415-18eeb08d1f45"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""ActionPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36a4d563-b4af-4684-8751-9eab213eb43d"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""ActionSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Item Pickup Left Hand"",
            ""id"": ""05e3ca5e-0539-4696-b674-a49a44887fd4"",
            ""actions"": [
                {
                    ""name"": ""PickUpLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""835e1668-f5f1-4ee5-bce6-d4789377bf75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickPickUpLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""ff444d5b-7050-4a2c-8e0f-bc33f3dbd887"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""244425af-7656-47ad-8aba-df6027650d8a"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""PickUpLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3964a808-7e86-4474-bf67-789207693071"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""QuickPickUpLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Item Pickup Right Hand"",
            ""id"": ""edb99944-c6d1-4bb1-8fbc-9d1e717f2898"",
            ""actions"": [
                {
                    ""name"": ""PickUpRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""13aaa8e6-d0a7-43cd-b783-78889900443a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickPickUpRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""7e693685-e8ed-403f-b6ed-d43b20e80736"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f758ae7-d274-4269-817d-eabb0cf5baef"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""PickUpRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e61f0244-41de-4c72-a714-6a92b27b9933"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""QuickPickUpRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Interaction Left Hand"",
            ""id"": ""1b6cbf4b-b719-4564-a0d0-7d94136ce86d"",
            ""actions"": [
                {
                    ""name"": ""InteractLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""4c8b25e9-a919-451e-9332-e96d0585602a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""250654cb-579e-4b8b-8175-cdda0f7a2790"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""InteractLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Interaction Right Hand"",
            ""id"": ""2031e4c6-cf6c-4f3d-9111-8b50ccc8c345"",
            ""actions"": [
                {
                    ""name"": ""InteractRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""c0cad37d-1393-4e64-961b-8fe1eb03223f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""590c6c3c-f6cd-4418-a4e0-b258ddc27f2f"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Virtual Reality"",
                    ""action"": ""InteractRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Virtual Reality"",
            ""bindingGroup"": ""Virtual Reality"",
            ""devices"": [
                {
                    ""devicePath"": ""<OpenXRHmd>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_EscapeMenu = m_Main.FindAction("EscapeMenu", throwIfNotFound: true);
            // Tracking
            m_Tracking = asset.FindActionMap("Tracking", throwIfNotFound: true);
            m_Tracking_HeadPosition = m_Tracking.FindAction("HeadPosition", throwIfNotFound: true);
            m_Tracking_HeadRotation = m_Tracking.FindAction("HeadRotation", throwIfNotFound: true);
            m_Tracking_LeftHandPosition = m_Tracking.FindAction("LeftHandPosition", throwIfNotFound: true);
            m_Tracking_LeftHandRotation = m_Tracking.FindAction("LeftHandRotation", throwIfNotFound: true);
            m_Tracking_RightHandPosition = m_Tracking.FindAction("RightHandPosition", throwIfNotFound: true);
            m_Tracking_RightHandRotation = m_Tracking.FindAction("RightHandRotation", throwIfNotFound: true);
            // Teleportation
            m_Teleportation = asset.FindActionMap("Teleportation", throwIfNotFound: true);
            m_Teleportation_Pointer = m_Teleportation.FindAction("Pointer", throwIfNotFound: true);
            m_Teleportation_Teleport = m_Teleportation.FindAction("Teleport", throwIfNotFound: true);
            // Movement Level 1
            m_MovementLevel1 = asset.FindActionMap("Movement Level 1", throwIfNotFound: true);
            m_MovementLevel1_Walk = m_MovementLevel1.FindAction("Walk", throwIfNotFound: true);
            m_MovementLevel1_TurnVR = m_MovementLevel1.FindAction("TurnVR", throwIfNotFound: true);
            m_MovementLevel1_Sprint = m_MovementLevel1.FindAction("Sprint", throwIfNotFound: true);
            // Movement Level 2
            m_MovementLevel2 = asset.FindActionMap("Movement Level 2", throwIfNotFound: true);
            m_MovementLevel2_Jump = m_MovementLevel2.FindAction("Jump", throwIfNotFound: true);
            m_MovementLevel2_Crouch = m_MovementLevel2.FindAction("Crouch", throwIfNotFound: true);
            m_MovementLevel2_JumpCrouchVR = m_MovementLevel2.FindAction("JumpCrouchVR", throwIfNotFound: true);
            // Menus Left Hand
            m_MenusLeftHand = asset.FindActionMap("Menus Left Hand", throwIfNotFound: true);
            m_MenusLeftHand_GrabLeftHand = m_MenusLeftHand.FindAction("GrabLeftHand", throwIfNotFound: true);
            // Menus Right Hand
            m_MenusRightHand = asset.FindActionMap("Menus Right Hand", throwIfNotFound: true);
            m_MenusRightHand_GrabRightHand = m_MenusRightHand.FindAction("GrabRightHand", throwIfNotFound: true);
            // Held Item Left Hand
            m_HeldItemLeftHand = asset.FindActionMap("Held Item Left Hand", throwIfNotFound: true);
            m_HeldItemLeftHand_Drop = m_HeldItemLeftHand.FindAction("Drop", throwIfNotFound: true);
            m_HeldItemLeftHand_ActionPrimary = m_HeldItemLeftHand.FindAction("ActionPrimary", throwIfNotFound: true);
            m_HeldItemLeftHand_ActionSecondary = m_HeldItemLeftHand.FindAction("ActionSecondary", throwIfNotFound: true);
            // Held Item Right Hand
            m_HeldItemRightHand = asset.FindActionMap("Held Item Right Hand", throwIfNotFound: true);
            m_HeldItemRightHand_Drop = m_HeldItemRightHand.FindAction("Drop", throwIfNotFound: true);
            m_HeldItemRightHand_ActionPrimary = m_HeldItemRightHand.FindAction("ActionPrimary", throwIfNotFound: true);
            m_HeldItemRightHand_ActionSecondary = m_HeldItemRightHand.FindAction("ActionSecondary", throwIfNotFound: true);
            // World Item Pickup Left Hand
            m_WorldItemPickupLeftHand = asset.FindActionMap("World Item Pickup Left Hand", throwIfNotFound: true);
            m_WorldItemPickupLeftHand_PickUpLeftHand = m_WorldItemPickupLeftHand.FindAction("PickUpLeftHand", throwIfNotFound: true);
            m_WorldItemPickupLeftHand_QuickPickUpLeftHand = m_WorldItemPickupLeftHand.FindAction("QuickPickUpLeftHand", throwIfNotFound: true);
            // World Item Pickup Right Hand
            m_WorldItemPickupRightHand = asset.FindActionMap("World Item Pickup Right Hand", throwIfNotFound: true);
            m_WorldItemPickupRightHand_PickUpRightHand = m_WorldItemPickupRightHand.FindAction("PickUpRightHand", throwIfNotFound: true);
            m_WorldItemPickupRightHand_QuickPickUpRightHand = m_WorldItemPickupRightHand.FindAction("QuickPickUpRightHand", throwIfNotFound: true);
            // World Interaction Left Hand
            m_WorldInteractionLeftHand = asset.FindActionMap("World Interaction Left Hand", throwIfNotFound: true);
            m_WorldInteractionLeftHand_InteractLeftHand = m_WorldInteractionLeftHand.FindAction("InteractLeftHand", throwIfNotFound: true);
            // World Interaction Right Hand
            m_WorldInteractionRightHand = asset.FindActionMap("World Interaction Right Hand", throwIfNotFound: true);
            m_WorldInteractionRightHand_InteractRightHand = m_WorldInteractionRightHand.FindAction("InteractRightHand", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private IMainActions m_MainActionsCallbackInterface;
        private readonly InputAction m_Main_EscapeMenu;
        public struct MainActions
        {
            private @VirtualReality m_Wrapper;
            public MainActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @EscapeMenu => m_Wrapper.m_Main_EscapeMenu;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void SetCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterface != null)
                {
                    @EscapeMenu.started -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                    @EscapeMenu.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                    @EscapeMenu.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnEscapeMenu;
                }
                m_Wrapper.m_MainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @EscapeMenu.started += instance.OnEscapeMenu;
                    @EscapeMenu.performed += instance.OnEscapeMenu;
                    @EscapeMenu.canceled += instance.OnEscapeMenu;
                }
            }
        }
        public MainActions @Main => new MainActions(this);

        // Tracking
        private readonly InputActionMap m_Tracking;
        private ITrackingActions m_TrackingActionsCallbackInterface;
        private readonly InputAction m_Tracking_HeadPosition;
        private readonly InputAction m_Tracking_HeadRotation;
        private readonly InputAction m_Tracking_LeftHandPosition;
        private readonly InputAction m_Tracking_LeftHandRotation;
        private readonly InputAction m_Tracking_RightHandPosition;
        private readonly InputAction m_Tracking_RightHandRotation;
        public struct TrackingActions
        {
            private @VirtualReality m_Wrapper;
            public TrackingActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @HeadPosition => m_Wrapper.m_Tracking_HeadPosition;
            public InputAction @HeadRotation => m_Wrapper.m_Tracking_HeadRotation;
            public InputAction @LeftHandPosition => m_Wrapper.m_Tracking_LeftHandPosition;
            public InputAction @LeftHandRotation => m_Wrapper.m_Tracking_LeftHandRotation;
            public InputAction @RightHandPosition => m_Wrapper.m_Tracking_RightHandPosition;
            public InputAction @RightHandRotation => m_Wrapper.m_Tracking_RightHandRotation;
            public InputActionMap Get() { return m_Wrapper.m_Tracking; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TrackingActions set) { return set.Get(); }
            public void SetCallbacks(ITrackingActions instance)
            {
                if (m_Wrapper.m_TrackingActionsCallbackInterface != null)
                {
                    @HeadPosition.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadPosition;
                    @HeadPosition.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadPosition;
                    @HeadPosition.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadPosition;
                    @HeadRotation.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadRotation;
                    @HeadRotation.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadRotation;
                    @HeadRotation.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnHeadRotation;
                    @LeftHandPosition.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandPosition;
                    @LeftHandPosition.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandPosition;
                    @LeftHandPosition.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandPosition;
                    @LeftHandRotation.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandRotation;
                    @LeftHandRotation.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandRotation;
                    @LeftHandRotation.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnLeftHandRotation;
                    @RightHandPosition.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandPosition;
                    @RightHandPosition.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandPosition;
                    @RightHandPosition.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandPosition;
                    @RightHandRotation.started -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandRotation;
                    @RightHandRotation.performed -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandRotation;
                    @RightHandRotation.canceled -= m_Wrapper.m_TrackingActionsCallbackInterface.OnRightHandRotation;
                }
                m_Wrapper.m_TrackingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @HeadPosition.started += instance.OnHeadPosition;
                    @HeadPosition.performed += instance.OnHeadPosition;
                    @HeadPosition.canceled += instance.OnHeadPosition;
                    @HeadRotation.started += instance.OnHeadRotation;
                    @HeadRotation.performed += instance.OnHeadRotation;
                    @HeadRotation.canceled += instance.OnHeadRotation;
                    @LeftHandPosition.started += instance.OnLeftHandPosition;
                    @LeftHandPosition.performed += instance.OnLeftHandPosition;
                    @LeftHandPosition.canceled += instance.OnLeftHandPosition;
                    @LeftHandRotation.started += instance.OnLeftHandRotation;
                    @LeftHandRotation.performed += instance.OnLeftHandRotation;
                    @LeftHandRotation.canceled += instance.OnLeftHandRotation;
                    @RightHandPosition.started += instance.OnRightHandPosition;
                    @RightHandPosition.performed += instance.OnRightHandPosition;
                    @RightHandPosition.canceled += instance.OnRightHandPosition;
                    @RightHandRotation.started += instance.OnRightHandRotation;
                    @RightHandRotation.performed += instance.OnRightHandRotation;
                    @RightHandRotation.canceled += instance.OnRightHandRotation;
                }
            }
        }
        public TrackingActions @Tracking => new TrackingActions(this);

        // Teleportation
        private readonly InputActionMap m_Teleportation;
        private ITeleportationActions m_TeleportationActionsCallbackInterface;
        private readonly InputAction m_Teleportation_Pointer;
        private readonly InputAction m_Teleportation_Teleport;
        public struct TeleportationActions
        {
            private @VirtualReality m_Wrapper;
            public TeleportationActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pointer => m_Wrapper.m_Teleportation_Pointer;
            public InputAction @Teleport => m_Wrapper.m_Teleportation_Teleport;
            public InputActionMap Get() { return m_Wrapper.m_Teleportation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TeleportationActions set) { return set.Get(); }
            public void SetCallbacks(ITeleportationActions instance)
            {
                if (m_Wrapper.m_TeleportationActionsCallbackInterface != null)
                {
                    @Pointer.started -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnPointer;
                    @Pointer.performed -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnPointer;
                    @Pointer.canceled -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnPointer;
                    @Teleport.started -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnTeleport;
                    @Teleport.performed -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnTeleport;
                    @Teleport.canceled -= m_Wrapper.m_TeleportationActionsCallbackInterface.OnTeleport;
                }
                m_Wrapper.m_TeleportationActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Pointer.started += instance.OnPointer;
                    @Pointer.performed += instance.OnPointer;
                    @Pointer.canceled += instance.OnPointer;
                    @Teleport.started += instance.OnTeleport;
                    @Teleport.performed += instance.OnTeleport;
                    @Teleport.canceled += instance.OnTeleport;
                }
            }
        }
        public TeleportationActions @Teleportation => new TeleportationActions(this);

        // Movement Level 1
        private readonly InputActionMap m_MovementLevel1;
        private IMovementLevel1Actions m_MovementLevel1ActionsCallbackInterface;
        private readonly InputAction m_MovementLevel1_Walk;
        private readonly InputAction m_MovementLevel1_TurnVR;
        private readonly InputAction m_MovementLevel1_Sprint;
        public struct MovementLevel1Actions
        {
            private @VirtualReality m_Wrapper;
            public MovementLevel1Actions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @Walk => m_Wrapper.m_MovementLevel1_Walk;
            public InputAction @TurnVR => m_Wrapper.m_MovementLevel1_TurnVR;
            public InputAction @Sprint => m_Wrapper.m_MovementLevel1_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_MovementLevel1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementLevel1Actions set) { return set.Get(); }
            public void SetCallbacks(IMovementLevel1Actions instance)
            {
                if (m_Wrapper.m_MovementLevel1ActionsCallbackInterface != null)
                {
                    @Walk.started -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @Walk.performed -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @Walk.canceled -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnWalk;
                    @TurnVR.started -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnTurnVR;
                    @TurnVR.performed -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnTurnVR;
                    @TurnVR.canceled -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnTurnVR;
                    @Sprint.started -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_MovementLevel1ActionsCallbackInterface.OnSprint;
                }
                m_Wrapper.m_MovementLevel1ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Walk.started += instance.OnWalk;
                    @Walk.performed += instance.OnWalk;
                    @Walk.canceled += instance.OnWalk;
                    @TurnVR.started += instance.OnTurnVR;
                    @TurnVR.performed += instance.OnTurnVR;
                    @TurnVR.canceled += instance.OnTurnVR;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                }
            }
        }
        public MovementLevel1Actions @MovementLevel1 => new MovementLevel1Actions(this);

        // Movement Level 2
        private readonly InputActionMap m_MovementLevel2;
        private IMovementLevel2Actions m_MovementLevel2ActionsCallbackInterface;
        private readonly InputAction m_MovementLevel2_Jump;
        private readonly InputAction m_MovementLevel2_Crouch;
        private readonly InputAction m_MovementLevel2_JumpCrouchVR;
        public struct MovementLevel2Actions
        {
            private @VirtualReality m_Wrapper;
            public MovementLevel2Actions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_MovementLevel2_Jump;
            public InputAction @Crouch => m_Wrapper.m_MovementLevel2_Crouch;
            public InputAction @JumpCrouchVR => m_Wrapper.m_MovementLevel2_JumpCrouchVR;
            public InputActionMap Get() { return m_Wrapper.m_MovementLevel2; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementLevel2Actions set) { return set.Get(); }
            public void SetCallbacks(IMovementLevel2Actions instance)
            {
                if (m_Wrapper.m_MovementLevel2ActionsCallbackInterface != null)
                {
                    @Jump.started -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJump;
                    @Crouch.started -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnCrouch;
                    @JumpCrouchVR.started -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJumpCrouchVR;
                    @JumpCrouchVR.performed -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJumpCrouchVR;
                    @JumpCrouchVR.canceled -= m_Wrapper.m_MovementLevel2ActionsCallbackInterface.OnJumpCrouchVR;
                }
                m_Wrapper.m_MovementLevel2ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @JumpCrouchVR.started += instance.OnJumpCrouchVR;
                    @JumpCrouchVR.performed += instance.OnJumpCrouchVR;
                    @JumpCrouchVR.canceled += instance.OnJumpCrouchVR;
                }
            }
        }
        public MovementLevel2Actions @MovementLevel2 => new MovementLevel2Actions(this);

        // Menus Left Hand
        private readonly InputActionMap m_MenusLeftHand;
        private IMenusLeftHandActions m_MenusLeftHandActionsCallbackInterface;
        private readonly InputAction m_MenusLeftHand_GrabLeftHand;
        public struct MenusLeftHandActions
        {
            private @VirtualReality m_Wrapper;
            public MenusLeftHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @GrabLeftHand => m_Wrapper.m_MenusLeftHand_GrabLeftHand;
            public InputActionMap Get() { return m_Wrapper.m_MenusLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenusLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IMenusLeftHandActions instance)
            {
                if (m_Wrapper.m_MenusLeftHandActionsCallbackInterface != null)
                {
                    @GrabLeftHand.started -= m_Wrapper.m_MenusLeftHandActionsCallbackInterface.OnGrabLeftHand;
                    @GrabLeftHand.performed -= m_Wrapper.m_MenusLeftHandActionsCallbackInterface.OnGrabLeftHand;
                    @GrabLeftHand.canceled -= m_Wrapper.m_MenusLeftHandActionsCallbackInterface.OnGrabLeftHand;
                }
                m_Wrapper.m_MenusLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @GrabLeftHand.started += instance.OnGrabLeftHand;
                    @GrabLeftHand.performed += instance.OnGrabLeftHand;
                    @GrabLeftHand.canceled += instance.OnGrabLeftHand;
                }
            }
        }
        public MenusLeftHandActions @MenusLeftHand => new MenusLeftHandActions(this);

        // Menus Right Hand
        private readonly InputActionMap m_MenusRightHand;
        private IMenusRightHandActions m_MenusRightHandActionsCallbackInterface;
        private readonly InputAction m_MenusRightHand_GrabRightHand;
        public struct MenusRightHandActions
        {
            private @VirtualReality m_Wrapper;
            public MenusRightHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @GrabRightHand => m_Wrapper.m_MenusRightHand_GrabRightHand;
            public InputActionMap Get() { return m_Wrapper.m_MenusRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenusRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IMenusRightHandActions instance)
            {
                if (m_Wrapper.m_MenusRightHandActionsCallbackInterface != null)
                {
                    @GrabRightHand.started -= m_Wrapper.m_MenusRightHandActionsCallbackInterface.OnGrabRightHand;
                    @GrabRightHand.performed -= m_Wrapper.m_MenusRightHandActionsCallbackInterface.OnGrabRightHand;
                    @GrabRightHand.canceled -= m_Wrapper.m_MenusRightHandActionsCallbackInterface.OnGrabRightHand;
                }
                m_Wrapper.m_MenusRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @GrabRightHand.started += instance.OnGrabRightHand;
                    @GrabRightHand.performed += instance.OnGrabRightHand;
                    @GrabRightHand.canceled += instance.OnGrabRightHand;
                }
            }
        }
        public MenusRightHandActions @MenusRightHand => new MenusRightHandActions(this);

        // Held Item Left Hand
        private readonly InputActionMap m_HeldItemLeftHand;
        private IHeldItemLeftHandActions m_HeldItemLeftHandActionsCallbackInterface;
        private readonly InputAction m_HeldItemLeftHand_Drop;
        private readonly InputAction m_HeldItemLeftHand_ActionPrimary;
        private readonly InputAction m_HeldItemLeftHand_ActionSecondary;
        public struct HeldItemLeftHandActions
        {
            private @VirtualReality m_Wrapper;
            public HeldItemLeftHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drop => m_Wrapper.m_HeldItemLeftHand_Drop;
            public InputAction @ActionPrimary => m_Wrapper.m_HeldItemLeftHand_ActionPrimary;
            public InputAction @ActionSecondary => m_Wrapper.m_HeldItemLeftHand_ActionSecondary;
            public InputActionMap Get() { return m_Wrapper.m_HeldItemLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HeldItemLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IHeldItemLeftHandActions instance)
            {
                if (m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface != null)
                {
                    @Drop.started -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnDrop;
                    @ActionPrimary.started -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.performed -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.canceled -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionPrimary;
                    @ActionSecondary.started -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.performed -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.canceled -= m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface.OnActionSecondary;
                }
                m_Wrapper.m_HeldItemLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                    @ActionPrimary.started += instance.OnActionPrimary;
                    @ActionPrimary.performed += instance.OnActionPrimary;
                    @ActionPrimary.canceled += instance.OnActionPrimary;
                    @ActionSecondary.started += instance.OnActionSecondary;
                    @ActionSecondary.performed += instance.OnActionSecondary;
                    @ActionSecondary.canceled += instance.OnActionSecondary;
                }
            }
        }
        public HeldItemLeftHandActions @HeldItemLeftHand => new HeldItemLeftHandActions(this);

        // Held Item Right Hand
        private readonly InputActionMap m_HeldItemRightHand;
        private IHeldItemRightHandActions m_HeldItemRightHandActionsCallbackInterface;
        private readonly InputAction m_HeldItemRightHand_Drop;
        private readonly InputAction m_HeldItemRightHand_ActionPrimary;
        private readonly InputAction m_HeldItemRightHand_ActionSecondary;
        public struct HeldItemRightHandActions
        {
            private @VirtualReality m_Wrapper;
            public HeldItemRightHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drop => m_Wrapper.m_HeldItemRightHand_Drop;
            public InputAction @ActionPrimary => m_Wrapper.m_HeldItemRightHand_ActionPrimary;
            public InputAction @ActionSecondary => m_Wrapper.m_HeldItemRightHand_ActionSecondary;
            public InputActionMap Get() { return m_Wrapper.m_HeldItemRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HeldItemRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IHeldItemRightHandActions instance)
            {
                if (m_Wrapper.m_HeldItemRightHandActionsCallbackInterface != null)
                {
                    @Drop.started -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnDrop;
                    @ActionPrimary.started -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.performed -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionPrimary;
                    @ActionPrimary.canceled -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionPrimary;
                    @ActionSecondary.started -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.performed -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionSecondary;
                    @ActionSecondary.canceled -= m_Wrapper.m_HeldItemRightHandActionsCallbackInterface.OnActionSecondary;
                }
                m_Wrapper.m_HeldItemRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                    @ActionPrimary.started += instance.OnActionPrimary;
                    @ActionPrimary.performed += instance.OnActionPrimary;
                    @ActionPrimary.canceled += instance.OnActionPrimary;
                    @ActionSecondary.started += instance.OnActionSecondary;
                    @ActionSecondary.performed += instance.OnActionSecondary;
                    @ActionSecondary.canceled += instance.OnActionSecondary;
                }
            }
        }
        public HeldItemRightHandActions @HeldItemRightHand => new HeldItemRightHandActions(this);

        // World Item Pickup Left Hand
        private readonly InputActionMap m_WorldItemPickupLeftHand;
        private IWorldItemPickupLeftHandActions m_WorldItemPickupLeftHandActionsCallbackInterface;
        private readonly InputAction m_WorldItemPickupLeftHand_PickUpLeftHand;
        private readonly InputAction m_WorldItemPickupLeftHand_QuickPickUpLeftHand;
        public struct WorldItemPickupLeftHandActions
        {
            private @VirtualReality m_Wrapper;
            public WorldItemPickupLeftHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @PickUpLeftHand => m_Wrapper.m_WorldItemPickupLeftHand_PickUpLeftHand;
            public InputAction @QuickPickUpLeftHand => m_Wrapper.m_WorldItemPickupLeftHand_QuickPickUpLeftHand;
            public InputActionMap Get() { return m_Wrapper.m_WorldItemPickupLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldItemPickupLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IWorldItemPickupLeftHandActions instance)
            {
                if (m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface != null)
                {
                    @PickUpLeftHand.started -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnPickUpLeftHand;
                    @PickUpLeftHand.performed -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnPickUpLeftHand;
                    @PickUpLeftHand.canceled -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnPickUpLeftHand;
                    @QuickPickUpLeftHand.started -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnQuickPickUpLeftHand;
                    @QuickPickUpLeftHand.performed -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnQuickPickUpLeftHand;
                    @QuickPickUpLeftHand.canceled -= m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface.OnQuickPickUpLeftHand;
                }
                m_Wrapper.m_WorldItemPickupLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PickUpLeftHand.started += instance.OnPickUpLeftHand;
                    @PickUpLeftHand.performed += instance.OnPickUpLeftHand;
                    @PickUpLeftHand.canceled += instance.OnPickUpLeftHand;
                    @QuickPickUpLeftHand.started += instance.OnQuickPickUpLeftHand;
                    @QuickPickUpLeftHand.performed += instance.OnQuickPickUpLeftHand;
                    @QuickPickUpLeftHand.canceled += instance.OnQuickPickUpLeftHand;
                }
            }
        }
        public WorldItemPickupLeftHandActions @WorldItemPickupLeftHand => new WorldItemPickupLeftHandActions(this);

        // World Item Pickup Right Hand
        private readonly InputActionMap m_WorldItemPickupRightHand;
        private IWorldItemPickupRightHandActions m_WorldItemPickupRightHandActionsCallbackInterface;
        private readonly InputAction m_WorldItemPickupRightHand_PickUpRightHand;
        private readonly InputAction m_WorldItemPickupRightHand_QuickPickUpRightHand;
        public struct WorldItemPickupRightHandActions
        {
            private @VirtualReality m_Wrapper;
            public WorldItemPickupRightHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @PickUpRightHand => m_Wrapper.m_WorldItemPickupRightHand_PickUpRightHand;
            public InputAction @QuickPickUpRightHand => m_Wrapper.m_WorldItemPickupRightHand_QuickPickUpRightHand;
            public InputActionMap Get() { return m_Wrapper.m_WorldItemPickupRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldItemPickupRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IWorldItemPickupRightHandActions instance)
            {
                if (m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface != null)
                {
                    @PickUpRightHand.started -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnPickUpRightHand;
                    @PickUpRightHand.performed -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnPickUpRightHand;
                    @PickUpRightHand.canceled -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnPickUpRightHand;
                    @QuickPickUpRightHand.started -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnQuickPickUpRightHand;
                    @QuickPickUpRightHand.performed -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnQuickPickUpRightHand;
                    @QuickPickUpRightHand.canceled -= m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface.OnQuickPickUpRightHand;
                }
                m_Wrapper.m_WorldItemPickupRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PickUpRightHand.started += instance.OnPickUpRightHand;
                    @PickUpRightHand.performed += instance.OnPickUpRightHand;
                    @PickUpRightHand.canceled += instance.OnPickUpRightHand;
                    @QuickPickUpRightHand.started += instance.OnQuickPickUpRightHand;
                    @QuickPickUpRightHand.performed += instance.OnQuickPickUpRightHand;
                    @QuickPickUpRightHand.canceled += instance.OnQuickPickUpRightHand;
                }
            }
        }
        public WorldItemPickupRightHandActions @WorldItemPickupRightHand => new WorldItemPickupRightHandActions(this);

        // World Interaction Left Hand
        private readonly InputActionMap m_WorldInteractionLeftHand;
        private IWorldInteractionLeftHandActions m_WorldInteractionLeftHandActionsCallbackInterface;
        private readonly InputAction m_WorldInteractionLeftHand_InteractLeftHand;
        public struct WorldInteractionLeftHandActions
        {
            private @VirtualReality m_Wrapper;
            public WorldInteractionLeftHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @InteractLeftHand => m_Wrapper.m_WorldInteractionLeftHand_InteractLeftHand;
            public InputActionMap Get() { return m_Wrapper.m_WorldInteractionLeftHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldInteractionLeftHandActions set) { return set.Get(); }
            public void SetCallbacks(IWorldInteractionLeftHandActions instance)
            {
                if (m_Wrapper.m_WorldInteractionLeftHandActionsCallbackInterface != null)
                {
                    @InteractLeftHand.started -= m_Wrapper.m_WorldInteractionLeftHandActionsCallbackInterface.OnInteractLeftHand;
                    @InteractLeftHand.performed -= m_Wrapper.m_WorldInteractionLeftHandActionsCallbackInterface.OnInteractLeftHand;
                    @InteractLeftHand.canceled -= m_Wrapper.m_WorldInteractionLeftHandActionsCallbackInterface.OnInteractLeftHand;
                }
                m_Wrapper.m_WorldInteractionLeftHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @InteractLeftHand.started += instance.OnInteractLeftHand;
                    @InteractLeftHand.performed += instance.OnInteractLeftHand;
                    @InteractLeftHand.canceled += instance.OnInteractLeftHand;
                }
            }
        }
        public WorldInteractionLeftHandActions @WorldInteractionLeftHand => new WorldInteractionLeftHandActions(this);

        // World Interaction Right Hand
        private readonly InputActionMap m_WorldInteractionRightHand;
        private IWorldInteractionRightHandActions m_WorldInteractionRightHandActionsCallbackInterface;
        private readonly InputAction m_WorldInteractionRightHand_InteractRightHand;
        public struct WorldInteractionRightHandActions
        {
            private @VirtualReality m_Wrapper;
            public WorldInteractionRightHandActions(@VirtualReality wrapper) { m_Wrapper = wrapper; }
            public InputAction @InteractRightHand => m_Wrapper.m_WorldInteractionRightHand_InteractRightHand;
            public InputActionMap Get() { return m_Wrapper.m_WorldInteractionRightHand; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WorldInteractionRightHandActions set) { return set.Get(); }
            public void SetCallbacks(IWorldInteractionRightHandActions instance)
            {
                if (m_Wrapper.m_WorldInteractionRightHandActionsCallbackInterface != null)
                {
                    @InteractRightHand.started -= m_Wrapper.m_WorldInteractionRightHandActionsCallbackInterface.OnInteractRightHand;
                    @InteractRightHand.performed -= m_Wrapper.m_WorldInteractionRightHandActionsCallbackInterface.OnInteractRightHand;
                    @InteractRightHand.canceled -= m_Wrapper.m_WorldInteractionRightHandActionsCallbackInterface.OnInteractRightHand;
                }
                m_Wrapper.m_WorldInteractionRightHandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @InteractRightHand.started += instance.OnInteractRightHand;
                    @InteractRightHand.performed += instance.OnInteractRightHand;
                    @InteractRightHand.canceled += instance.OnInteractRightHand;
                }
            }
        }
        public WorldInteractionRightHandActions @WorldInteractionRightHand => new WorldInteractionRightHandActions(this);
        private int m_VirtualRealitySchemeIndex = -1;
        public InputControlScheme VirtualRealityScheme
        {
            get
            {
                if (m_VirtualRealitySchemeIndex == -1) m_VirtualRealitySchemeIndex = asset.FindControlSchemeIndex("Virtual Reality");
                return asset.controlSchemes[m_VirtualRealitySchemeIndex];
            }
        }
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_ControllerSchemeIndex = -1;
        public InputControlScheme ControllerScheme
        {
            get
            {
                if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
                return asset.controlSchemes[m_ControllerSchemeIndex];
            }
        }
        public interface IMainActions
        {
            void OnEscapeMenu(InputAction.CallbackContext context);
        }
        public interface ITrackingActions
        {
            void OnHeadPosition(InputAction.CallbackContext context);
            void OnHeadRotation(InputAction.CallbackContext context);
            void OnLeftHandPosition(InputAction.CallbackContext context);
            void OnLeftHandRotation(InputAction.CallbackContext context);
            void OnRightHandPosition(InputAction.CallbackContext context);
            void OnRightHandRotation(InputAction.CallbackContext context);
        }
        public interface ITeleportationActions
        {
            void OnPointer(InputAction.CallbackContext context);
            void OnTeleport(InputAction.CallbackContext context);
        }
        public interface IMovementLevel1Actions
        {
            void OnWalk(InputAction.CallbackContext context);
            void OnTurnVR(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
        public interface IMovementLevel2Actions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnJumpCrouchVR(InputAction.CallbackContext context);
        }
        public interface IMenusLeftHandActions
        {
            void OnGrabLeftHand(InputAction.CallbackContext context);
        }
        public interface IMenusRightHandActions
        {
            void OnGrabRightHand(InputAction.CallbackContext context);
        }
        public interface IHeldItemLeftHandActions
        {
            void OnDrop(InputAction.CallbackContext context);
            void OnActionPrimary(InputAction.CallbackContext context);
            void OnActionSecondary(InputAction.CallbackContext context);
        }
        public interface IHeldItemRightHandActions
        {
            void OnDrop(InputAction.CallbackContext context);
            void OnActionPrimary(InputAction.CallbackContext context);
            void OnActionSecondary(InputAction.CallbackContext context);
        }
        public interface IWorldItemPickupLeftHandActions
        {
            void OnPickUpLeftHand(InputAction.CallbackContext context);
            void OnQuickPickUpLeftHand(InputAction.CallbackContext context);
        }
        public interface IWorldItemPickupRightHandActions
        {
            void OnPickUpRightHand(InputAction.CallbackContext context);
            void OnQuickPickUpRightHand(InputAction.CallbackContext context);
        }
        public interface IWorldInteractionLeftHandActions
        {
            void OnInteractLeftHand(InputAction.CallbackContext context);
        }
        public interface IWorldInteractionRightHandActions
        {
            void OnInteractRightHand(InputAction.CallbackContext context);
        }
    }
}
